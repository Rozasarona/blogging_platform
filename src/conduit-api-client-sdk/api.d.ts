/**
 * Conduit API
 * Conduit API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference path="../custom.d.ts" />
import { Configuration } from "./configuration";
/**
 *
 * @export
 */
export declare const COLLECTION_FORMATS: {
    csv: string;
    ssv: string;
    tsv: string;
    pipes: string;
};
/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}
/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}
/**
 *
 * @export
 * @class BaseAPI
 */
export declare class BaseAPI {
    protected basePath: string;
    protected fetch: FetchAPI;
    protected configuration: Configuration;
    constructor(configuration?: Configuration, basePath?: string, fetch?: FetchAPI);
}
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export declare class RequiredError extends Error {
    field: string;
    name: "RequiredError";
    constructor(field: string, msg?: string);
}
/**
 *
 * @export
 * @interface Article
 */
export interface Article {
    /**
     *
     * @type {string}
     * @memberof Article
     */
    slug: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof Article
     */
    body: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Article
     */
    tagList: Array<string>;
    /**
     *
     * @type {Date}
     * @memberof Article
     */
    createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Article
     */
    updatedAt: Date;
    /**
     *
     * @type {boolean}
     * @memberof Article
     */
    favorited: boolean;
    /**
     *
     * @type {number}
     * @memberof Article
     */
    favoritesCount: number;
    /**
     *
     * @type {Profile}
     * @memberof Article
     */
    author: Profile;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     *
     * @type {number}
     * @memberof Comment
     */
    id: number;
    /**
     *
     * @type {Date}
     * @memberof Comment
     */
    createdAt: Date;
    /**
     *
     * @type {Date}
     * @memberof Comment
     */
    updatedAt: Date;
    /**
     *
     * @type {string}
     * @memberof Comment
     */
    body: string;
    /**
     *
     * @type {Profile}
     * @memberof Comment
     */
    author: Profile;
}
/**
 *
 * @export
 * @interface GenericErrorModel
 */
export interface GenericErrorModel {
    /**
     *
     * @type {any}
     * @memberof GenericErrorModel
     */
    errors: any;
}
/**
 *
 * @export
 * @interface LoginUser
 */
export interface LoginUser {
    /**
     *
     * @type {string}
     * @memberof LoginUser
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof LoginUser
     */
    password: string;
}
/**
 *
 * @export
 * @interface LoginUserRequest
 */
export interface LoginUserRequest {
    /**
     *
     * @type {LoginUser}
     * @memberof LoginUserRequest
     */
    user: LoginUser;
}
/**
 *
 * @export
 * @interface MultipleArticlesResponse
 */
export interface MultipleArticlesResponse {
    /**
     *
     * @type {Array<Article>}
     * @memberof MultipleArticlesResponse
     */
    articles: Array<Article>;
    /**
     *
     * @type {number}
     * @memberof MultipleArticlesResponse
     */
    articlesCount: number;
}
/**
 *
 * @export
 * @interface MultipleCommentsResponse
 */
export interface MultipleCommentsResponse {
    /**
     *
     * @type {Array<Comment>}
     * @memberof MultipleCommentsResponse
     */
    comments: Array<Comment>;
}
/**
 *
 * @export
 * @interface NewArticle
 */
export interface NewArticle {
    /**
     *
     * @type {string}
     * @memberof NewArticle
     */
    title: string;
    /**
     *
     * @type {string}
     * @memberof NewArticle
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof NewArticle
     */
    body: string;
    /**
     *
     * @type {Array<string>}
     * @memberof NewArticle
     */
    tagList?: Array<string>;
}
/**
 *
 * @export
 * @interface NewArticleRequest
 */
export interface NewArticleRequest {
    /**
     *
     * @type {NewArticle}
     * @memberof NewArticleRequest
     */
    article: NewArticle;
}
/**
 *
 * @export
 * @interface NewComment
 */
export interface NewComment {
    /**
     *
     * @type {string}
     * @memberof NewComment
     */
    body: string;
}
/**
 *
 * @export
 * @interface NewCommentRequest
 */
export interface NewCommentRequest {
    /**
     *
     * @type {NewComment}
     * @memberof NewCommentRequest
     */
    comment: NewComment;
}
/**
 *
 * @export
 * @interface NewUser
 */
export interface NewUser {
    /**
     *
     * @type {string}
     * @memberof NewUser
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof NewUser
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof NewUser
     */
    password: string;
}
/**
 *
 * @export
 * @interface NewUserRequest
 */
export interface NewUserRequest {
    /**
     *
     * @type {NewUser}
     * @memberof NewUserRequest
     */
    user: NewUser;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    bio: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    image: string;
    /**
     *
     * @type {boolean}
     * @memberof Profile
     */
    following: boolean;
}
/**
 *
 * @export
 * @interface ProfileResponse
 */
export interface ProfileResponse {
    /**
     *
     * @type {Profile}
     * @memberof ProfileResponse
     */
    profile: Profile;
}
/**
 *
 * @export
 * @interface SingleArticleResponse
 */
export interface SingleArticleResponse {
    /**
     *
     * @type {Article}
     * @memberof SingleArticleResponse
     */
    article: Article;
}
/**
 *
 * @export
 * @interface SingleCommentResponse
 */
export interface SingleCommentResponse {
    /**
     *
     * @type {Comment}
     * @memberof SingleCommentResponse
     */
    comment: Comment;
}
/**
 *
 * @export
 * @interface TagsResponse
 */
export interface TagsResponse {
    /**
     *
     * @type {Array<string>}
     * @memberof TagsResponse
     */
    tags: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateArticle
 */
export interface UpdateArticle {
    /**
     *
     * @type {string}
     * @memberof UpdateArticle
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateArticle
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateArticle
     */
    body?: string;
}
/**
 *
 * @export
 * @interface UpdateArticleRequest
 */
export interface UpdateArticleRequest {
    /**
     *
     * @type {UpdateArticle}
     * @memberof UpdateArticleRequest
     */
    article: UpdateArticle;
}
/**
 *
 * @export
 * @interface UpdateUser
 */
export interface UpdateUser {
    /**
     *
     * @type {string}
     * @memberof UpdateUser
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUser
     */
    token?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUser
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUser
     */
    bio?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUser
     */
    image?: string;
}
/**
 *
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     *
     * @type {UpdateUser}
     * @memberof UpdateUserRequest
     */
    user: UpdateUser;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    token: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    username: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    bio: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    image: string;
}
/**
 *
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     *
     * @type {User}
     * @memberof UserResponse
     */
    user: User;
}
/**
 * ArticlesApi - fetch parameter creator
 * @export
 */
export declare const ArticlesApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create an article. Auth is required
     * @summary Create an article
     * @param {NewArticleRequest} article Article to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticle(article: NewArticleRequest, options?: any): FetchArgs;
    /**
     * Delete an article. Auth is required
     * @summary Delete an article
     * @param {string} slug Slug of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticle(slug: string, options?: any): FetchArgs;
    /**
     * Get an article. Auth not required
     * @summary Get an article
     * @param {string} slug Slug of the article to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticle(slug: string, options?: any): FetchArgs;
    /**
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @summary Get recent articles globally
     * @param {string} [tag] Filter by tag
     * @param {string} [author] Filter by author (username)
     * @param {string} [favorited] Filter by favorites of a user (username)
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticles(tag?: string | undefined, author?: string | undefined, favorited?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): FetchArgs;
    /**
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @summary Get recent articles from users you follow
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticlesFeed(limit?: number | undefined, offset?: number | undefined, options?: any): FetchArgs;
    /**
     * Update an article. Auth is required
     * @summary Update an article
     * @param {string} slug Slug of the article to update
     * @param {UpdateArticleRequest} article Article to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArticle(slug: string, article: UpdateArticleRequest, options?: any): FetchArgs;
};
/**
 * ArticlesApi - functional programming interface
 * @export
 */
export declare const ArticlesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create an article. Auth is required
     * @summary Create an article
     * @param {NewArticleRequest} article Article to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticle(article: NewArticleRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SingleArticleResponse>;
    /**
     * Delete an article. Auth is required
     * @summary Delete an article
     * @param {string} slug Slug of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticle(slug: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Get an article. Auth not required
     * @summary Get an article
     * @param {string} slug Slug of the article to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticle(slug: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SingleArticleResponse>;
    /**
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @summary Get recent articles globally
     * @param {string} [tag] Filter by tag
     * @param {string} [author] Filter by author (username)
     * @param {string} [favorited] Filter by favorites of a user (username)
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticles(tag?: string | undefined, author?: string | undefined, favorited?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<MultipleArticlesResponse>;
    /**
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @summary Get recent articles from users you follow
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticlesFeed(limit?: number | undefined, offset?: number | undefined, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<MultipleArticlesResponse>;
    /**
     * Update an article. Auth is required
     * @summary Update an article
     * @param {string} slug Slug of the article to update
     * @param {UpdateArticleRequest} article Article to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArticle(slug: string, article: UpdateArticleRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SingleArticleResponse>;
};
/**
 * ArticlesApi - factory interface
 * @export
 */
export declare const ArticlesApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create an article. Auth is required
     * @summary Create an article
     * @param {NewArticleRequest} article Article to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticle(article: NewArticleRequest, options?: any): Promise<SingleArticleResponse>;
    /**
     * Delete an article. Auth is required
     * @summary Delete an article
     * @param {string} slug Slug of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticle(slug: string, options?: any): Promise<Response>;
    /**
     * Get an article. Auth not required
     * @summary Get an article
     * @param {string} slug Slug of the article to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticle(slug: string, options?: any): Promise<SingleArticleResponse>;
    /**
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @summary Get recent articles globally
     * @param {string} [tag] Filter by tag
     * @param {string} [author] Filter by author (username)
     * @param {string} [favorited] Filter by favorites of a user (username)
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticles(tag?: string | undefined, author?: string | undefined, favorited?: string | undefined, limit?: number | undefined, offset?: number | undefined, options?: any): Promise<MultipleArticlesResponse>;
    /**
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @summary Get recent articles from users you follow
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticlesFeed(limit?: number | undefined, offset?: number | undefined, options?: any): Promise<MultipleArticlesResponse>;
    /**
     * Update an article. Auth is required
     * @summary Update an article
     * @param {string} slug Slug of the article to update
     * @param {UpdateArticleRequest} article Article to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateArticle(slug: string, article: UpdateArticleRequest, options?: any): Promise<SingleArticleResponse>;
};
/**
 * ArticlesApi - object-oriented interface
 * @export
 * @class ArticlesApi
 * @extends {BaseAPI}
 */
export declare class ArticlesApi extends BaseAPI {
    /**
     * Create an article. Auth is required
     * @summary Create an article
     * @param {NewArticleRequest} article Article to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    createArticle(article: NewArticleRequest, options?: any): Promise<SingleArticleResponse>;
    /**
     * Delete an article. Auth is required
     * @summary Delete an article
     * @param {string} slug Slug of the article to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    deleteArticle(slug: string, options?: any): Promise<Response>;
    /**
     * Get an article. Auth not required
     * @summary Get an article
     * @param {string} slug Slug of the article to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    getArticle(slug: string, options?: any): Promise<SingleArticleResponse>;
    /**
     * Get most recent articles globally. Use query parameters to filter results. Auth is optional
     * @summary Get recent articles globally
     * @param {string} [tag] Filter by tag
     * @param {string} [author] Filter by author (username)
     * @param {string} [favorited] Filter by favorites of a user (username)
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    getArticles(tag?: string, author?: string, favorited?: string, limit?: number, offset?: number, options?: any): Promise<MultipleArticlesResponse>;
    /**
     * Get most recent articles from users you follow. Use query parameters to limit. Auth is required
     * @summary Get recent articles from users you follow
     * @param {number} [limit] Limit number of articles returned (default is 20)
     * @param {number} [offset] Offset/skip number of articles (default is 0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    getArticlesFeed(limit?: number, offset?: number, options?: any): Promise<MultipleArticlesResponse>;
    /**
     * Update an article. Auth is required
     * @summary Update an article
     * @param {string} slug Slug of the article to update
     * @param {UpdateArticleRequest} article Article to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApi
     */
    updateArticle(slug: string, article: UpdateArticleRequest, options?: any): Promise<SingleArticleResponse>;
}
/**
 * CommentsApi - fetch parameter creator
 * @export
 */
export declare const CommentsApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Create a comment for an article. Auth is required
     * @summary Create a comment for an article
     * @param {string} slug Slug of the article that you want to create a comment for
     * @param {NewCommentRequest} comment Comment you want to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticleComment(slug: string, comment: NewCommentRequest, options?: any): FetchArgs;
    /**
     * Delete a comment for an article. Auth is required
     * @summary Delete a comment for an article
     * @param {string} slug Slug of the article that you want to delete a comment for
     * @param {number} id ID of the comment you want to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticleComment(slug: string, id: number, options?: any): FetchArgs;
    /**
     * Get the comments for an article. Auth is optional
     * @summary Get comments for an article
     * @param {string} slug Slug of the article that you want to get comments for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticleComments(slug: string, options?: any): FetchArgs;
};
/**
 * CommentsApi - functional programming interface
 * @export
 */
export declare const CommentsApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Create a comment for an article. Auth is required
     * @summary Create a comment for an article
     * @param {string} slug Slug of the article that you want to create a comment for
     * @param {NewCommentRequest} comment Comment you want to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticleComment(slug: string, comment: NewCommentRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SingleCommentResponse>;
    /**
     * Delete a comment for an article. Auth is required
     * @summary Delete a comment for an article
     * @param {string} slug Slug of the article that you want to delete a comment for
     * @param {number} id ID of the comment you want to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticleComment(slug: string, id: number, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<Response>;
    /**
     * Get the comments for an article. Auth is optional
     * @summary Get comments for an article
     * @param {string} slug Slug of the article that you want to get comments for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticleComments(slug: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<MultipleCommentsResponse>;
};
/**
 * CommentsApi - factory interface
 * @export
 */
export declare const CommentsApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Create a comment for an article. Auth is required
     * @summary Create a comment for an article
     * @param {string} slug Slug of the article that you want to create a comment for
     * @param {NewCommentRequest} comment Comment you want to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticleComment(slug: string, comment: NewCommentRequest, options?: any): Promise<SingleCommentResponse>;
    /**
     * Delete a comment for an article. Auth is required
     * @summary Delete a comment for an article
     * @param {string} slug Slug of the article that you want to delete a comment for
     * @param {number} id ID of the comment you want to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticleComment(slug: string, id: number, options?: any): Promise<Response>;
    /**
     * Get the comments for an article. Auth is optional
     * @summary Get comments for an article
     * @param {string} slug Slug of the article that you want to get comments for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getArticleComments(slug: string, options?: any): Promise<MultipleCommentsResponse>;
};
/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export declare class CommentsApi extends BaseAPI {
    /**
     * Create a comment for an article. Auth is required
     * @summary Create a comment for an article
     * @param {string} slug Slug of the article that you want to create a comment for
     * @param {NewCommentRequest} comment Comment you want to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    createArticleComment(slug: string, comment: NewCommentRequest, options?: any): Promise<SingleCommentResponse>;
    /**
     * Delete a comment for an article. Auth is required
     * @summary Delete a comment for an article
     * @param {string} slug Slug of the article that you want to delete a comment for
     * @param {number} id ID of the comment you want to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    deleteArticleComment(slug: string, id: number, options?: any): Promise<Response>;
    /**
     * Get the comments for an article. Auth is optional
     * @summary Get comments for an article
     * @param {string} slug Slug of the article that you want to get comments for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    getArticleComments(slug: string, options?: any): Promise<MultipleCommentsResponse>;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export declare const DefaultApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Get tags. Auth not required
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsGet(options?: any): FetchArgs;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Get tags. Auth not required
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsGet(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<TagsResponse>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Get tags. Auth not required
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsGet(options?: any): Promise<TagsResponse>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     * Get tags. Auth not required
     * @summary Get tags
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    tagsGet(options?: any): Promise<TagsResponse>;
}
/**
 * FavoritesApi - fetch parameter creator
 * @export
 */
export declare const FavoritesApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Favorite an article. Auth is required
     * @summary Favorite an article
     * @param {string} slug Slug of the article that you want to favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticleFavorite(slug: string, options?: any): FetchArgs;
    /**
     * Unfavorite an article. Auth is required
     * @summary Unfavorite an article
     * @param {string} slug Slug of the article that you want to unfavorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticleFavorite(slug: string, options?: any): FetchArgs;
};
/**
 * FavoritesApi - functional programming interface
 * @export
 */
export declare const FavoritesApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Favorite an article. Auth is required
     * @summary Favorite an article
     * @param {string} slug Slug of the article that you want to favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticleFavorite(slug: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SingleArticleResponse>;
    /**
     * Unfavorite an article. Auth is required
     * @summary Unfavorite an article
     * @param {string} slug Slug of the article that you want to unfavorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticleFavorite(slug: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<SingleArticleResponse>;
};
/**
 * FavoritesApi - factory interface
 * @export
 */
export declare const FavoritesApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Favorite an article. Auth is required
     * @summary Favorite an article
     * @param {string} slug Slug of the article that you want to favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createArticleFavorite(slug: string, options?: any): Promise<SingleArticleResponse>;
    /**
     * Unfavorite an article. Auth is required
     * @summary Unfavorite an article
     * @param {string} slug Slug of the article that you want to unfavorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArticleFavorite(slug: string, options?: any): Promise<SingleArticleResponse>;
};
/**
 * FavoritesApi - object-oriented interface
 * @export
 * @class FavoritesApi
 * @extends {BaseAPI}
 */
export declare class FavoritesApi extends BaseAPI {
    /**
     * Favorite an article. Auth is required
     * @summary Favorite an article
     * @param {string} slug Slug of the article that you want to favorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    createArticleFavorite(slug: string, options?: any): Promise<SingleArticleResponse>;
    /**
     * Unfavorite an article. Auth is required
     * @summary Unfavorite an article
     * @param {string} slug Slug of the article that you want to unfavorite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FavoritesApi
     */
    deleteArticleFavorite(slug: string, options?: any): Promise<SingleArticleResponse>;
}
/**
 * ProfileApi - fetch parameter creator
 * @export
 */
export declare const ProfileApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Follow a user by username
     * @summary Follow a user
     * @param {string} username Username of the profile you want to follow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserByUsername(username: string, options?: any): FetchArgs;
    /**
     * Get a profile of a user of the system. Auth is optional
     * @summary Get a profile
     * @param {string} username Username of the profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfileByUsername(username: string, options?: any): FetchArgs;
    /**
     * Unfollow a user by username
     * @summary Unfollow a user
     * @param {string} username Username of the profile you want to unfollow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserByUsername(username: string, options?: any): FetchArgs;
};
/**
 * ProfileApi - functional programming interface
 * @export
 */
export declare const ProfileApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Follow a user by username
     * @summary Follow a user
     * @param {string} username Username of the profile you want to follow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserByUsername(username: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ProfileResponse>;
    /**
     * Get a profile of a user of the system. Auth is optional
     * @summary Get a profile
     * @param {string} username Username of the profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfileByUsername(username: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ProfileResponse>;
    /**
     * Unfollow a user by username
     * @summary Unfollow a user
     * @param {string} username Username of the profile you want to unfollow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserByUsername(username: string, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<ProfileResponse>;
};
/**
 * ProfileApi - factory interface
 * @export
 */
export declare const ProfileApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Follow a user by username
     * @summary Follow a user
     * @param {string} username Username of the profile you want to follow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserByUsername(username: string, options?: any): Promise<ProfileResponse>;
    /**
     * Get a profile of a user of the system. Auth is optional
     * @summary Get a profile
     * @param {string} username Username of the profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfileByUsername(username: string, options?: any): Promise<ProfileResponse>;
    /**
     * Unfollow a user by username
     * @summary Unfollow a user
     * @param {string} username Username of the profile you want to unfollow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserByUsername(username: string, options?: any): Promise<ProfileResponse>;
};
/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export declare class ProfileApi extends BaseAPI {
    /**
     * Follow a user by username
     * @summary Follow a user
     * @param {string} username Username of the profile you want to follow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    followUserByUsername(username: string, options?: any): Promise<ProfileResponse>;
    /**
     * Get a profile of a user of the system. Auth is optional
     * @summary Get a profile
     * @param {string} username Username of the profile to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    getProfileByUsername(username: string, options?: any): Promise<ProfileResponse>;
    /**
     * Unfollow a user by username
     * @summary Unfollow a user
     * @param {string} username Username of the profile you want to unfollow
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    unfollowUserByUsername(username: string, options?: any): Promise<ProfileResponse>;
}
/**
 * UserAndAuthenticationApi - fetch parameter creator
 * @export
 */
export declare const UserAndAuthenticationApiFetchParamCreator: (configuration?: Configuration | undefined) => {
    /**
     * Register a new user
     * @summary Register a new user
     * @param {NewUserRequest} body Details of the new user to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: NewUserRequest, options?: any): FetchArgs;
    /**
     * Gets the currently logged-in user
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): FetchArgs;
    /**
     * Login for existing user
     * @summary Existing user login
     * @param {LoginUserRequest} body Credentials to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(body: LoginUserRequest, options?: any): FetchArgs;
    /**
     * Updated user information for current user
     * @summary Update current user
     * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): FetchArgs;
};
/**
 * UserAndAuthenticationApi - functional programming interface
 * @export
 */
export declare const UserAndAuthenticationApiFp: (configuration?: Configuration | undefined) => {
    /**
     * Register a new user
     * @summary Register a new user
     * @param {NewUserRequest} body Details of the new user to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: NewUserRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
    /**
     * Gets the currently logged-in user
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
    /**
     * Login for existing user
     * @summary Existing user login
     * @param {LoginUserRequest} body Credentials to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(body: LoginUserRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
    /**
     * Updated user information for current user
     * @summary Update current user
     * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): (fetch?: FetchAPI | undefined, basePath?: string | undefined) => Promise<UserResponse>;
};
/**
 * UserAndAuthenticationApi - factory interface
 * @export
 */
export declare const UserAndAuthenticationApiFactory: (configuration?: Configuration | undefined, fetch?: FetchAPI | undefined, basePath?: string | undefined) => {
    /**
     * Register a new user
     * @summary Register a new user
     * @param {NewUserRequest} body Details of the new user to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(body: NewUserRequest, options?: any): Promise<UserResponse>;
    /**
     * Gets the currently logged-in user
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUser(options?: any): Promise<UserResponse>;
    /**
     * Login for existing user
     * @summary Existing user login
     * @param {LoginUserRequest} body Credentials to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(body: LoginUserRequest, options?: any): Promise<UserResponse>;
    /**
     * Updated user information for current user
     * @summary Update current user
     * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): Promise<UserResponse>;
};
/**
 * UserAndAuthenticationApi - object-oriented interface
 * @export
 * @class UserAndAuthenticationApi
 * @extends {BaseAPI}
 */
export declare class UserAndAuthenticationApi extends BaseAPI {
    /**
     * Register a new user
     * @summary Register a new user
     * @param {NewUserRequest} body Details of the new user to register
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    createUser(body: NewUserRequest, options?: any): Promise<UserResponse>;
    /**
     * Gets the currently logged-in user
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    getCurrentUser(options?: any): Promise<UserResponse>;
    /**
     * Login for existing user
     * @summary Existing user login
     * @param {LoginUserRequest} body Credentials to use
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    login(body: LoginUserRequest, options?: any): Promise<UserResponse>;
    /**
     * Updated user information for current user
     * @summary Update current user
     * @param {UpdateUserRequest} body User details to update. At least **one** field is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserAndAuthenticationApi
     */
    updateCurrentUser(body: UpdateUserRequest, options?: any): Promise<UserResponse>;
}
